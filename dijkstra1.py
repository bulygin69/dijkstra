G = {
  1: {2:7, 3:9, 6:14},
  2: {1:7, 3:10, 4:15},
  3: {4:11, 6:2, 1:9, 2:10},
  6: {1:14, 5:9, 3:2},
  5: {6:9, 4:6},
  4: {5:6, 3:11, 2:15}
}

N = len(G) #количество элементов в словаре (G)

t = [] #список посещённых вершин
p = {} #словарь {открытая вершина : её метка}
v = None #текущая вершина

def dijkstra3(v, p, t):
    print('\n  Обходим всех соседей текущей вершины')
    for x in G[v]: #для каждого соседа (х) текущей вершины (v)
        xm = p[v] + G[v][x] #новая метка соседа (xm) =
                            #метка текущей вершины (p[v]) +
                            #значение ребра vx (G[v][x])
                            
        if not x in p: #если соседа (x) нет в словаре (p)
            p[x] = xm #записываем новую метку (xm) в словарь с ключем (x)
        elif not x in t: #иначе если (x) не в (t)
            if p[x] > xm: #если старая метка соседа больше новой метки
                p[x] = xm #новую метку записываем на место старой
            
        print('текущей вершины v =', v, ' сосед x =', x, 'c меткой xm =', xm)
    
    print('p =', p)
    
    print('\n  Добавляем текущую вершину в список посещенных')
    t.append(v)            
    print('t =', t) 
    
    if N <= len(t):
        return           
    
    print('\n  Находим вершину с минимальной меткой')
    for d in p: #вершина (d) с минимальной меткой из словаря (p)
        if d not in t:
            dm = p[d] #метка вершины (d)
            break #пусть это будет первая вершина из словаря (p)
    
    for y in p: #для каждой вершины (y) из словаря (p)
        if p[y] < dm and not y in t: #если метка вершины (y) <
                                     #вершины (d) & (y) нет в (t)
            dm = p[y] #метку вершины (y) записываем в (dm)
            d = y #вершину (y) записываем в (d)
            print('вершина y =', y, 'с меткой dm =', dm)
    
    print('вершина d =', d, 'имеет минимальную метку dm =', dm, \
          ': \nтеперь текущей вершиной v будет вершина d')
    v = d #теперь текущей вершиной v будет вершина d
    
    print('\n  Рекурсивно вызываем функцию Дейкстры с параметрами v, p, t')
    dijkstra3(v, p, t)

    
            

# 1-й способ изменения глобальной переменой:
# используем возвращаемые значения
def start_v(start):
    v = start
    p[v] = 0
    print('\n  Начальная текущая вершина v =', v)
    return v, p
    
v, p = start_v(1)   


'''
# 2-й способ изменения глобальной переменной:
# объявляем необходимые переменные как global
def start_v(start):
    global v, p
    v = start
    p[v] = 0
    print('\n  Начальная текущая вершина v =', v)

start_v(3)
'''
##### 
   
dijkstra3(v, p, t)
print('\nВершины и их метки =', p)






